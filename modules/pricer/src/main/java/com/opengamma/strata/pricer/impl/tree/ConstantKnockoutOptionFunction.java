package com.opengamma.strata.pricer.impl.tree;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.PutCall;
import com.opengamma.strata.collect.array.DoubleArray;
import com.opengamma.strata.product.fx.BarrierType;

@BeanDefinition(builderScope = "private")
public final class ConstantKnockoutOptionFunction
    extends KnockoutOptionFunction implements ImmutableBean, Serializable {

  /**
   * The strike value.
   */
  @PropertyDefinition(overrideGet = true)
  private final double strike;
  /**
   * The time to expiry.
   */
  @PropertyDefinition(overrideGet = true)
  private final double timeToExpiry;
  /**
   * The sign. 
   * <p>
   * The sign is +1 for call and -1 for put.
   */
  @PropertyDefinition
  private final double sign;

  /**
   * The barrier type.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final BarrierType barrierType;

  @PropertyDefinition
  private final double barrierLevel;

  @PropertyDefinition(validate = "notNull")
  private final DoubleArray rebate;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance. 
   * 
   * @param strike  the strike
   * @param timeToExpiry  the time to expiry
   * @param putCall  put or call
   * @param barrierType  the barrier type
   * @param barrierLevel  the barrier level
   * @param rebate  the rebate
   * @return the instance
   */
  public static ConstantKnockoutOptionFunction of(double strike, double timeToExpiry, PutCall putCall,
      BarrierType barrierType, double barrierLevel, DoubleArray rebate) {
    double sign = putCall.isCall() ? 1d : -1d;
    return new ConstantKnockoutOptionFunction(strike, timeToExpiry, sign, barrierType, barrierLevel, rebate);
  }

  //-------------------------------------------------------------------------
  @Override
  public double getBarrierLevel(int step) {
    return barrierLevel;
  }

  @Override
  public double getRebate(int step) {
    return rebate.get(step);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ConstantKnockoutOptionFunction}.
   * @return the meta-bean, not null
   */
  public static ConstantKnockoutOptionFunction.Meta meta() {
    return ConstantKnockoutOptionFunction.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ConstantKnockoutOptionFunction.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private ConstantKnockoutOptionFunction(
      double strike,
      double timeToExpiry,
      double sign,
      BarrierType barrierType,
      double barrierLevel,
      DoubleArray rebate) {
    JodaBeanUtils.notNull(barrierType, "barrierType");
    JodaBeanUtils.notNull(rebate, "rebate");
    this.strike = strike;
    this.timeToExpiry = timeToExpiry;
    this.sign = sign;
    this.barrierType = barrierType;
    this.barrierLevel = barrierLevel;
    this.rebate = rebate;
  }

  @Override
  public ConstantKnockoutOptionFunction.Meta metaBean() {
    return ConstantKnockoutOptionFunction.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the strike value.
   * @return the value of the property
   */
  @Override
  public double getStrike() {
    return strike;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time to expiry.
   * @return the value of the property
   */
  @Override
  public double getTimeToExpiry() {
    return timeToExpiry;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the sign.
   * <p>
   * The sign is +1 for call and -1 for put.
   * @return the value of the property
   */
  public double getSign() {
    return sign;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the barrier type.
   * @return the value of the property, not null
   */
  @Override
  public BarrierType getBarrierType() {
    return barrierType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the barrierLevel.
   * @return the value of the property
   */
  public double getBarrierLevel() {
    return barrierLevel;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rebate.
   * @return the value of the property, not null
   */
  public DoubleArray getRebate() {
    return rebate;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ConstantKnockoutOptionFunction other = (ConstantKnockoutOptionFunction) obj;
      return JodaBeanUtils.equal(strike, other.strike) &&
          JodaBeanUtils.equal(timeToExpiry, other.timeToExpiry) &&
          JodaBeanUtils.equal(sign, other.sign) &&
          JodaBeanUtils.equal(barrierType, other.barrierType) &&
          JodaBeanUtils.equal(barrierLevel, other.barrierLevel) &&
          JodaBeanUtils.equal(rebate, other.rebate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(strike);
    hash = hash * 31 + JodaBeanUtils.hashCode(timeToExpiry);
    hash = hash * 31 + JodaBeanUtils.hashCode(sign);
    hash = hash * 31 + JodaBeanUtils.hashCode(barrierType);
    hash = hash * 31 + JodaBeanUtils.hashCode(barrierLevel);
    hash = hash * 31 + JodaBeanUtils.hashCode(rebate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(224);
    buf.append("ConstantKnockoutOptionFunction{");
    buf.append("strike").append('=').append(strike).append(',').append(' ');
    buf.append("timeToExpiry").append('=').append(timeToExpiry).append(',').append(' ');
    buf.append("sign").append('=').append(sign).append(',').append(' ');
    buf.append("barrierType").append('=').append(barrierType).append(',').append(' ');
    buf.append("barrierLevel").append('=').append(barrierLevel).append(',').append(' ');
    buf.append("rebate").append('=').append(JodaBeanUtils.toString(rebate));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ConstantKnockoutOptionFunction}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code strike} property.
     */
    private final MetaProperty<Double> strike = DirectMetaProperty.ofImmutable(
        this, "strike", ConstantKnockoutOptionFunction.class, Double.TYPE);
    /**
     * The meta-property for the {@code timeToExpiry} property.
     */
    private final MetaProperty<Double> timeToExpiry = DirectMetaProperty.ofImmutable(
        this, "timeToExpiry", ConstantKnockoutOptionFunction.class, Double.TYPE);
    /**
     * The meta-property for the {@code sign} property.
     */
    private final MetaProperty<Double> sign = DirectMetaProperty.ofImmutable(
        this, "sign", ConstantKnockoutOptionFunction.class, Double.TYPE);
    /**
     * The meta-property for the {@code barrierType} property.
     */
    private final MetaProperty<BarrierType> barrierType = DirectMetaProperty.ofImmutable(
        this, "barrierType", ConstantKnockoutOptionFunction.class, BarrierType.class);
    /**
     * The meta-property for the {@code barrierLevel} property.
     */
    private final MetaProperty<Double> barrierLevel = DirectMetaProperty.ofImmutable(
        this, "barrierLevel", ConstantKnockoutOptionFunction.class, Double.TYPE);
    /**
     * The meta-property for the {@code rebate} property.
     */
    private final MetaProperty<DoubleArray> rebate = DirectMetaProperty.ofImmutable(
        this, "rebate", ConstantKnockoutOptionFunction.class, DoubleArray.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "strike",
        "timeToExpiry",
        "sign",
        "barrierType",
        "barrierLevel",
        "rebate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          return strike;
        case -1831499397:  // timeToExpiry
          return timeToExpiry;
        case 3530173:  // sign
          return sign;
        case 1029043089:  // barrierType
          return barrierType;
        case 1827586573:  // barrierLevel
          return barrierLevel;
        case -934952029:  // rebate
          return rebate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ConstantKnockoutOptionFunction> builder() {
      return new ConstantKnockoutOptionFunction.Builder();
    }

    @Override
    public Class<? extends ConstantKnockoutOptionFunction> beanType() {
      return ConstantKnockoutOptionFunction.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code strike} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> strike() {
      return strike;
    }

    /**
     * The meta-property for the {@code timeToExpiry} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> timeToExpiry() {
      return timeToExpiry;
    }

    /**
     * The meta-property for the {@code sign} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> sign() {
      return sign;
    }

    /**
     * The meta-property for the {@code barrierType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<BarrierType> barrierType() {
      return barrierType;
    }

    /**
     * The meta-property for the {@code barrierLevel} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> barrierLevel() {
      return barrierLevel;
    }

    /**
     * The meta-property for the {@code rebate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> rebate() {
      return rebate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          return ((ConstantKnockoutOptionFunction) bean).getStrike();
        case -1831499397:  // timeToExpiry
          return ((ConstantKnockoutOptionFunction) bean).getTimeToExpiry();
        case 3530173:  // sign
          return ((ConstantKnockoutOptionFunction) bean).getSign();
        case 1029043089:  // barrierType
          return ((ConstantKnockoutOptionFunction) bean).getBarrierType();
        case 1827586573:  // barrierLevel
          return ((ConstantKnockoutOptionFunction) bean).getBarrierLevel();
        case -934952029:  // rebate
          return ((ConstantKnockoutOptionFunction) bean).getRebate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ConstantKnockoutOptionFunction}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<ConstantKnockoutOptionFunction> {

    private double strike;
    private double timeToExpiry;
    private double sign;
    private BarrierType barrierType;
    private double barrierLevel;
    private DoubleArray rebate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          return strike;
        case -1831499397:  // timeToExpiry
          return timeToExpiry;
        case 3530173:  // sign
          return sign;
        case 1029043089:  // barrierType
          return barrierType;
        case 1827586573:  // barrierLevel
          return barrierLevel;
        case -934952029:  // rebate
          return rebate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          this.strike = (Double) newValue;
          break;
        case -1831499397:  // timeToExpiry
          this.timeToExpiry = (Double) newValue;
          break;
        case 3530173:  // sign
          this.sign = (Double) newValue;
          break;
        case 1029043089:  // barrierType
          this.barrierType = (BarrierType) newValue;
          break;
        case 1827586573:  // barrierLevel
          this.barrierLevel = (Double) newValue;
          break;
        case -934952029:  // rebate
          this.rebate = (DoubleArray) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ConstantKnockoutOptionFunction build() {
      return new ConstantKnockoutOptionFunction(
          strike,
          timeToExpiry,
          sign,
          barrierType,
          barrierLevel,
          rebate);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(224);
      buf.append("ConstantKnockoutOptionFunction.Builder{");
      buf.append("strike").append('=').append(JodaBeanUtils.toString(strike)).append(',').append(' ');
      buf.append("timeToExpiry").append('=').append(JodaBeanUtils.toString(timeToExpiry)).append(',').append(' ');
      buf.append("sign").append('=').append(JodaBeanUtils.toString(sign)).append(',').append(' ');
      buf.append("barrierType").append('=').append(JodaBeanUtils.toString(barrierType)).append(',').append(' ');
      buf.append("barrierLevel").append('=').append(JodaBeanUtils.toString(barrierLevel)).append(',').append(' ');
      buf.append("rebate").append('=').append(JodaBeanUtils.toString(rebate));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
