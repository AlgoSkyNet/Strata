/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.impl.tree;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.collect.array.DoubleArray;

/**
 * Cox-Ross-Rubinstein lattice specification.
 */
@BeanDefinition(builderScope = "private")
public final class CoxRossRubinsteinLatticeSpecification
    implements LatticeSpecification, ImmutableBean, Serializable {

  /**
   * The number of time steps.
   */
  @PropertyDefinition(overrideGet = true)
  final int numberOfSteps;

  public static CoxRossRubinsteinLatticeSpecification of(int numberOfSteps) {
    ArgChecker.isTrue(numberOfSteps > 0, "the number of steps should be positive");
    return new CoxRossRubinsteinLatticeSpecification(numberOfSteps);
  }

  @Override
  public DoubleArray getParametersTrinomial(double volatility, double interestRate, double dt) {
    double twoRootT = Math.sqrt(2d * dt);
    double dx = volatility * twoRootT;
    double upFactor = Math.exp(dx);
    double downFactor = Math.exp(-dx);
    double factor1 = Math.exp(0.5 * interestRate * dt);
    double factor2 = Math.exp(0.5 * dx);
    double factor3 = Math.exp(-0.5 * dx);
    double upProbability = Math.pow((factor1 - factor3) / (factor3 - factor2), 2);
    double downProbability = Math.pow((factor2 - factor1) / (factor3 - factor2), 2);
    double middleProbability = 1d - upProbability - downProbability;
    return DoubleArray.of(upFactor, 1d, downFactor, upProbability, middleProbability, downProbability);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CoxRossRubinsteinLatticeSpecification}.
   * @return the meta-bean, not null
   */
  public static CoxRossRubinsteinLatticeSpecification.Meta meta() {
    return CoxRossRubinsteinLatticeSpecification.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CoxRossRubinsteinLatticeSpecification.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private CoxRossRubinsteinLatticeSpecification(
      int numberOfSteps) {
    this.numberOfSteps = numberOfSteps;
  }

  @Override
  public CoxRossRubinsteinLatticeSpecification.Meta metaBean() {
    return CoxRossRubinsteinLatticeSpecification.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the number of time steps.
   * @return the value of the property
   */
  @Override
  public int getNumberOfSteps() {
    return numberOfSteps;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CoxRossRubinsteinLatticeSpecification other = (CoxRossRubinsteinLatticeSpecification) obj;
      return (numberOfSteps == other.numberOfSteps);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(numberOfSteps);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CoxRossRubinsteinLatticeSpecification{");
    buf.append("numberOfSteps").append('=').append(JodaBeanUtils.toString(numberOfSteps));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CoxRossRubinsteinLatticeSpecification}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code numberOfSteps} property.
     */
    private final MetaProperty<Integer> numberOfSteps = DirectMetaProperty.ofImmutable(
        this, "numberOfSteps", CoxRossRubinsteinLatticeSpecification.class, Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "numberOfSteps");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1323103225:  // numberOfSteps
          return numberOfSteps;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CoxRossRubinsteinLatticeSpecification> builder() {
      return new CoxRossRubinsteinLatticeSpecification.Builder();
    }

    @Override
    public Class<? extends CoxRossRubinsteinLatticeSpecification> beanType() {
      return CoxRossRubinsteinLatticeSpecification.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code numberOfSteps} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> numberOfSteps() {
      return numberOfSteps;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1323103225:  // numberOfSteps
          return ((CoxRossRubinsteinLatticeSpecification) bean).getNumberOfSteps();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CoxRossRubinsteinLatticeSpecification}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<CoxRossRubinsteinLatticeSpecification> {

    private int numberOfSteps;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1323103225:  // numberOfSteps
          return numberOfSteps;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1323103225:  // numberOfSteps
          this.numberOfSteps = (Integer) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CoxRossRubinsteinLatticeSpecification build() {
      return new CoxRossRubinsteinLatticeSpecification(
          numberOfSteps);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("CoxRossRubinsteinLatticeSpecification.Builder{");
      buf.append("numberOfSteps").append('=').append(JodaBeanUtils.toString(numberOfSteps));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
