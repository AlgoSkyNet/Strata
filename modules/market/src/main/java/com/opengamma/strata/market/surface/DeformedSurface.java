package com.opengamma.strata.market.surface;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Function;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.value.ValueDerivatives;
import com.opengamma.strata.collect.tuple.DoublesPair;

@BeanDefinition
public final class DeformedSurface
    implements Surface, ImmutableBean, Serializable {

  // TODO need metadata of deformed surface??

  @PropertyDefinition(validate = "notNull")
  private final Surface originalSurface;

  @PropertyDefinition(validate = "notNull")
  private final Function<DoublesPair, ValueDerivatives> valueFunction;

  //-------------------------------------------------------------------------
  @Override
  public int getParameterCount() {
    return originalSurface.getParameterCount();
  }

  //-------------------------------------------------------------------------
  @Override
  public SurfaceMetadata getMetadata() {
    return originalSurface.getMetadata();
  }

  @Override
  public double zValue(double x, double y) {
    return zValue(DoublesPair.of(x, y));
  }

  @Override
  public double zValue(DoublesPair xyPair) {
    return valueFunction.apply(xyPair).getValue();
  }

  @Override
  public SurfaceUnitParameterSensitivity zValueParameterSensitivity(double x, double y) {
    return zValueParameterSensitivity(DoublesPair.of(x, y));
  }

  @Override
  public SurfaceUnitParameterSensitivity zValueParameterSensitivity(DoublesPair xyPair) {
    return SurfaceUnitParameterSensitivity.of(getMetadata(), valueFunction.apply(xyPair).getDerivatives());
  }

  //-------------------------------------------------------------------------
  public static DeformedSurface of(
      Surface originalSurface,
      Function<DoublesPair, ValueDerivatives> valueFunction) {

    return DeformedSurface.builder()
        .originalSurface(originalSurface)
        .valueFunction(valueFunction)
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DeformedSurface}.
   * @return the meta-bean, not null
   */
  public static DeformedSurface.Meta meta() {
    return DeformedSurface.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DeformedSurface.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static DeformedSurface.Builder builder() {
    return new DeformedSurface.Builder();
  }

  private DeformedSurface(
      Surface originalSurface,
      Function<DoublesPair, ValueDerivatives> valueFunction) {
    JodaBeanUtils.notNull(originalSurface, "originalSurface");
    JodaBeanUtils.notNull(valueFunction, "valueFunction");
    this.originalSurface = originalSurface;
    this.valueFunction = valueFunction;
  }

  @Override
  public DeformedSurface.Meta metaBean() {
    return DeformedSurface.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the originalSurface.
   * @return the value of the property, not null
   */
  public Surface getOriginalSurface() {
    return originalSurface;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the valueFunction.
   * @return the value of the property, not null
   */
  public Function<DoublesPair, ValueDerivatives> getValueFunction() {
    return valueFunction;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DeformedSurface other = (DeformedSurface) obj;
      return JodaBeanUtils.equal(originalSurface, other.originalSurface) &&
          JodaBeanUtils.equal(valueFunction, other.valueFunction);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(originalSurface);
    hash = hash * 31 + JodaBeanUtils.hashCode(valueFunction);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("DeformedSurface{");
    buf.append("originalSurface").append('=').append(originalSurface).append(',').append(' ');
    buf.append("valueFunction").append('=').append(JodaBeanUtils.toString(valueFunction));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DeformedSurface}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code originalSurface} property.
     */
    private final MetaProperty<Surface> originalSurface = DirectMetaProperty.ofImmutable(
        this, "originalSurface", DeformedSurface.class, Surface.class);
    /**
     * The meta-property for the {@code valueFunction} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Function<DoublesPair, ValueDerivatives>> valueFunction = DirectMetaProperty.ofImmutable(
        this, "valueFunction", DeformedSurface.class, (Class) Function.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "originalSurface",
        "valueFunction");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1982430620:  // originalSurface
          return originalSurface;
        case 636119145:  // valueFunction
          return valueFunction;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public DeformedSurface.Builder builder() {
      return new DeformedSurface.Builder();
    }

    @Override
    public Class<? extends DeformedSurface> beanType() {
      return DeformedSurface.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code originalSurface} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Surface> originalSurface() {
      return originalSurface;
    }

    /**
     * The meta-property for the {@code valueFunction} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Function<DoublesPair, ValueDerivatives>> valueFunction() {
      return valueFunction;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1982430620:  // originalSurface
          return ((DeformedSurface) bean).getOriginalSurface();
        case 636119145:  // valueFunction
          return ((DeformedSurface) bean).getValueFunction();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code DeformedSurface}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<DeformedSurface> {

    private Surface originalSurface;
    private Function<DoublesPair, ValueDerivatives> valueFunction;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(DeformedSurface beanToCopy) {
      this.originalSurface = beanToCopy.getOriginalSurface();
      this.valueFunction = beanToCopy.getValueFunction();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1982430620:  // originalSurface
          return originalSurface;
        case 636119145:  // valueFunction
          return valueFunction;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1982430620:  // originalSurface
          this.originalSurface = (Surface) newValue;
          break;
        case 636119145:  // valueFunction
          this.valueFunction = (Function<DoublesPair, ValueDerivatives>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public DeformedSurface build() {
      return new DeformedSurface(
          originalSurface,
          valueFunction);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the originalSurface.
     * @param originalSurface  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder originalSurface(Surface originalSurface) {
      JodaBeanUtils.notNull(originalSurface, "originalSurface");
      this.originalSurface = originalSurface;
      return this;
    }

    /**
     * Sets the valueFunction.
     * @param valueFunction  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder valueFunction(Function<DoublesPair, ValueDerivatives> valueFunction) {
      JodaBeanUtils.notNull(valueFunction, "valueFunction");
      this.valueFunction = valueFunction;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("DeformedSurface.Builder{");
      buf.append("originalSurface").append('=').append(JodaBeanUtils.toString(originalSurface)).append(',').append(' ');
      buf.append("valueFunction").append('=').append(JodaBeanUtils.toString(valueFunction));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
