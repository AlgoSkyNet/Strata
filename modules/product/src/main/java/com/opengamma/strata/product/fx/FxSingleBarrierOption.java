package com.opengamma.strata.product.fx;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.Payment;
import com.opengamma.strata.basics.market.ReferenceData;
import com.opengamma.strata.basics.market.Resolvable;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.Product;

@BeanDefinition(builderScope = "private")
public final class FxSingleBarrierOption
    implements Product, Resolvable<ResolvedFxSingleBarrierOption>, ImmutableBean, Serializable {

  /**
   * The underlying FX vanilla option.
   */
  @PropertyDefinition(validate = "notNull")
  private final FxVanillaOption underlyingOption;
  /**
   * The barrier description.
   */
  @PropertyDefinition(validate = "notNull")
  private final Barrier barrier;
  /**
   * The amount paid back to the option holder in case the option expires inactive.
   */
  @PropertyDefinition(get = "optional")
  private final Payment rebate;

  //-------------------------------------------------------------------------
  /**
   * Obtains FX single barrier option with rebate. 
   * 
   * @param underlyingOption  the underlying FX vanilla option
   * @param barrier  the barrier
   * @param rebate  the rebate
   * @return the instance
   */
  public static FxSingleBarrierOption of(FxVanillaOption underlyingOption, Barrier barrier, Payment rebate) {
    return new FxSingleBarrierOption(underlyingOption, barrier, rebate);
  }

  /**
   * Obtains FX single barrier option without rebate. 
   * 
   * @param underlyingOption  the underlying FX vanilla option
   * @param barrier  the barrier
   * @return the instance
   */
  public static FxSingleBarrierOption of(FxVanillaOption underlyingOption, Barrier barrier) {
    return new FxSingleBarrierOption(underlyingOption, barrier, null);
  }

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    if (rebate != null) {
      ArgChecker.isTrue(underlyingOption.getUnderlying().getPaymentDate().isEqual(rebate.getDate()),
          "rebate payment must be equal to underlying FX payment");
      ArgChecker.isTrue(rebate.getAmount() > 0d, "rebate must be positive");
    }
  }

  //-------------------------------------------------------------------------
  @Override
  public ResolvedFxSingleBarrierOption resolve(ReferenceData refData) {
    return ResolvedFxSingleBarrierOption.of(underlyingOption.resolve(refData), barrier, rebate);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FxSingleBarrierOption}.
   * @return the meta-bean, not null
   */
  public static FxSingleBarrierOption.Meta meta() {
    return FxSingleBarrierOption.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FxSingleBarrierOption.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private FxSingleBarrierOption(
      FxVanillaOption underlyingOption,
      Barrier barrier,
      Payment rebate) {
    JodaBeanUtils.notNull(underlyingOption, "underlyingOption");
    JodaBeanUtils.notNull(barrier, "barrier");
    this.underlyingOption = underlyingOption;
    this.barrier = barrier;
    this.rebate = rebate;
    validate();
  }

  @Override
  public FxSingleBarrierOption.Meta metaBean() {
    return FxSingleBarrierOption.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying FX vanilla option.
   * @return the value of the property, not null
   */
  public FxVanillaOption getUnderlyingOption() {
    return underlyingOption;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the barrier description.
   * @return the value of the property, not null
   */
  public Barrier getBarrier() {
    return barrier;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the amount paid back to the option holder in case the option expires inactive.
   * @return the optional value of the property, not null
   */
  public Optional<Payment> getRebate() {
    return Optional.ofNullable(rebate);
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxSingleBarrierOption other = (FxSingleBarrierOption) obj;
      return JodaBeanUtils.equal(underlyingOption, other.underlyingOption) &&
          JodaBeanUtils.equal(barrier, other.barrier) &&
          JodaBeanUtils.equal(rebate, other.rebate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(underlyingOption);
    hash = hash * 31 + JodaBeanUtils.hashCode(barrier);
    hash = hash * 31 + JodaBeanUtils.hashCode(rebate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("FxSingleBarrierOption{");
    buf.append("underlyingOption").append('=').append(underlyingOption).append(',').append(' ');
    buf.append("barrier").append('=').append(barrier).append(',').append(' ');
    buf.append("rebate").append('=').append(JodaBeanUtils.toString(rebate));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxSingleBarrierOption}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code underlyingOption} property.
     */
    private final MetaProperty<FxVanillaOption> underlyingOption = DirectMetaProperty.ofImmutable(
        this, "underlyingOption", FxSingleBarrierOption.class, FxVanillaOption.class);
    /**
     * The meta-property for the {@code barrier} property.
     */
    private final MetaProperty<Barrier> barrier = DirectMetaProperty.ofImmutable(
        this, "barrier", FxSingleBarrierOption.class, Barrier.class);
    /**
     * The meta-property for the {@code rebate} property.
     */
    private final MetaProperty<Payment> rebate = DirectMetaProperty.ofImmutable(
        this, "rebate", FxSingleBarrierOption.class, Payment.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "underlyingOption",
        "barrier",
        "rebate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 87556658:  // underlyingOption
          return underlyingOption;
        case -333143113:  // barrier
          return barrier;
        case -934952029:  // rebate
          return rebate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FxSingleBarrierOption> builder() {
      return new FxSingleBarrierOption.Builder();
    }

    @Override
    public Class<? extends FxSingleBarrierOption> beanType() {
      return FxSingleBarrierOption.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code underlyingOption} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FxVanillaOption> underlyingOption() {
      return underlyingOption;
    }

    /**
     * The meta-property for the {@code barrier} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Barrier> barrier() {
      return barrier;
    }

    /**
     * The meta-property for the {@code rebate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Payment> rebate() {
      return rebate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 87556658:  // underlyingOption
          return ((FxSingleBarrierOption) bean).getUnderlyingOption();
        case -333143113:  // barrier
          return ((FxSingleBarrierOption) bean).getBarrier();
        case -934952029:  // rebate
          return ((FxSingleBarrierOption) bean).rebate;
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FxSingleBarrierOption}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<FxSingleBarrierOption> {

    private FxVanillaOption underlyingOption;
    private Barrier barrier;
    private Payment rebate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 87556658:  // underlyingOption
          return underlyingOption;
        case -333143113:  // barrier
          return barrier;
        case -934952029:  // rebate
          return rebate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 87556658:  // underlyingOption
          this.underlyingOption = (FxVanillaOption) newValue;
          break;
        case -333143113:  // barrier
          this.barrier = (Barrier) newValue;
          break;
        case -934952029:  // rebate
          this.rebate = (Payment) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FxSingleBarrierOption build() {
      return new FxSingleBarrierOption(
          underlyingOption,
          barrier,
          rebate);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("FxSingleBarrierOption.Builder{");
      buf.append("underlyingOption").append('=').append(JodaBeanUtils.toString(underlyingOption)).append(',').append(' ');
      buf.append("barrier").append('=').append(JodaBeanUtils.toString(barrier)).append(',').append(' ');
      buf.append("rebate").append('=').append(JodaBeanUtils.toString(rebate));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
